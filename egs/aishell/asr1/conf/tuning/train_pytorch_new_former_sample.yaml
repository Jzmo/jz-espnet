# network architecture
# encoder related
elayers: 12
eunits: 2048
# decoder related
dlayers: 6
dunits: 2048
# attention related
adim: 256
aheads: 4

# hybrid CTC/attention
mtlalpha: 0.3

# label smoothing
lsm-weight: 0.1

# minibatch related
batch-size: 32
maxlen-in: 512  # if input length  > maxlen-in, batchsize is automatically reduced
maxlen-out: 150 # if output length > maxlen-out, batchsize is automatically reduced

# optimization related
sortagrad: 0 # Feed samples from shortest to longest ; -1: enabled for all epochs, 0: disabled, other: enabled for 'other' epochs
opt: noam
accum-grad: 2
grad-clip: 5
patience: 0
epochs: 50
dropout-rate: 0.1

# transformer specific setting
backend: pytorch
model-module: "espnet.nets.pytorch_backend.e2e_asr_newformer:E2E"
transformer-input-layer: conv2d     # encoder architecture type
transformer-lr: 1.0
transformer-warmup-steps: 25000
transformer-attn-dropout-rate: 0.0
transformer-length-normalized-loss: false
transformer-init: pytorch


# dynamic conv specific setting
transformer-encoder-pos-enc-layer-type: rel_pos
transformer-encoder-selfattn-layer-type: rel_selfattn
macaron-style: true
conv-encoder-type: stack # stack, alter, parallel
# dual-type: shuffle_ch # way to combine attn and conv output in parallel structure
use-pos-enc-conv: true # add position encoding to convolution input
conv-encoder-layer-type: lightconv # type of convolution [lightconv, lightconv2d, dynamicconv, dynamicconv2d, conformer_conv1d, lightdepthwise]
lightconv-wshare: 4
lightconv-dim: 256
conv-encoder-kernel-length: "31_31_31_31_31_31_31_31_31_31_31_31" # convolution kernel for each layer
conv-block-number: "9_10_11_12" # use convolution module in 9, 10, 11, 12 layers
use-se-layer: true # add SE module after each block
se-block-number: "9_10_11_12" # add SE module after each block in 9, 10, 11, 12 layers
shuffle-after: true # shuffle channels after each block
shuffle-block-number: "9_10_11_12" # shuffle channels after each block in 9, 10, 11, 12 layers
